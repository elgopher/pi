// (c) 2022 Jacek Olszak
// This code is licensed under MIT license (see LICENSE for details)

package ebitengine

import (
	"github.com/hajimehoshi/ebiten/v2/audio"

	"github.com/elgopher/pi"
)

const (
	audioSampleRate = 44100
)

// AudioStream is an abstraction used by ebitengine back-end to consume audio stream generated by the game. The stream
// will be played back to the user. By default, [pi.AudioSystem] is used. Game developers could use a different audio
// system though. In such case they could set the AudioStream variable to their own implementation.
var AudioStream interface {
	// Read reads generated audio into p buffer.
	//
	// The format is:
	//	[data]      = [sample 0] [sample 1] [sample 2] ...
	//	[sample *]  = [channel left] [channel right] ...
	//	[channel *] = [bits 0-15]
	//
	// Sample rate must be 44100, channel count 2 (stereo) and bit depth 16.
	//
	// Byte ordering is little endian.
	//
	// See [io.Reader] for documentation how to implement this method.
	// When error is returned then game stops with the error.
	Read(p []byte) (n int, err error)
}

func startAudio() (stop func(), _ error) {
	if AudioStream == nil {
		AudioStream = pi.Audio()
	}

	audioCtx := audio.NewContext(audioSampleRate)
	player, err := audioCtx.NewPlayer(AudioStream)
	if err != nil {
		return func() {}, err
	}
	player.Play()

	return func() {
		_ = player.Close()
	}, nil
}
