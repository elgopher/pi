// Code generated by 'yaegi extract github.com/elgopher/pi/key'. DO NOT EDIT.

package lib

import (
	"reflect"

	"github.com/elgopher/pi/key"
)

func init() {
	Symbols["github.com/elgopher/pi/key/key"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"A":            reflect.ValueOf(key.A),
		"Alt":          reflect.ValueOf(key.Alt),
		"Apostrophe":   reflect.ValueOf(key.Apostrophe),
		"B":            reflect.ValueOf(key.B),
		"Back":         reflect.ValueOf(key.Back),
		"Backquote":    reflect.ValueOf(key.Backquote),
		"Backslash":    reflect.ValueOf(key.Backslash),
		"BracketLeft":  reflect.ValueOf(key.BracketLeft),
		"BracketRight": reflect.ValueOf(key.BracketRight),
		"Btn":          reflect.ValueOf(key.Btn),
		"Btnp":         reflect.ValueOf(key.Btnp),
		"C":            reflect.ValueOf(key.C),
		"Cap":          reflect.ValueOf(key.Cap),
		"Comma":        reflect.ValueOf(key.Comma),
		"Ctrl":         reflect.ValueOf(key.Ctrl),
		"D":            reflect.ValueOf(key.D),
		"Digit0":       reflect.ValueOf(key.Digit0),
		"Digit1":       reflect.ValueOf(key.Digit1),
		"Digit2":       reflect.ValueOf(key.Digit2),
		"Digit3":       reflect.ValueOf(key.Digit3),
		"Digit4":       reflect.ValueOf(key.Digit4),
		"Digit5":       reflect.ValueOf(key.Digit5),
		"Digit6":       reflect.ValueOf(key.Digit6),
		"Digit7":       reflect.ValueOf(key.Digit7),
		"Digit8":       reflect.ValueOf(key.Digit8),
		"Digit9":       reflect.ValueOf(key.Digit9),
		"Down":         reflect.ValueOf(key.Down),
		"Duration":     reflect.ValueOf(&key.Duration).Elem(),
		"E":            reflect.ValueOf(key.E),
		"Enter":        reflect.ValueOf(key.Enter),
		"Equal":        reflect.ValueOf(key.Equal),
		"Esc":          reflect.ValueOf(key.Esc),
		"F":            reflect.ValueOf(key.F),
		"F1":           reflect.ValueOf(key.F1),
		"F10":          reflect.ValueOf(key.F10),
		"F11":          reflect.ValueOf(key.F11),
		"F12":          reflect.ValueOf(key.F12),
		"F2":           reflect.ValueOf(key.F2),
		"F3":           reflect.ValueOf(key.F3),
		"F4":           reflect.ValueOf(key.F4),
		"F5":           reflect.ValueOf(key.F5),
		"F6":           reflect.ValueOf(key.F6),
		"F7":           reflect.ValueOf(key.F7),
		"F8":           reflect.ValueOf(key.F8),
		"F9":           reflect.ValueOf(key.F9),
		"G":            reflect.ValueOf(key.G),
		"H":            reflect.ValueOf(key.H),
		"I":            reflect.ValueOf(key.I),
		"J":            reflect.ValueOf(key.J),
		"K":            reflect.ValueOf(key.K),
		"L":            reflect.ValueOf(key.L),
		"Left":         reflect.ValueOf(key.Left),
		"M":            reflect.ValueOf(key.M),
		"Minus":        reflect.ValueOf(key.Minus),
		"N":            reflect.ValueOf(key.N),
		"O":            reflect.ValueOf(key.O),
		"P":            reflect.ValueOf(key.P),
		"Period":       reflect.ValueOf(key.Period),
		"Q":            reflect.ValueOf(key.Q),
		"R":            reflect.ValueOf(key.R),
		"Right":        reflect.ValueOf(key.Right),
		"S":            reflect.ValueOf(key.S),
		"Semicolon":    reflect.ValueOf(key.Semicolon),
		"Shift":        reflect.ValueOf(key.Shift),
		"Slash":        reflect.ValueOf(key.Slash),
		"Space":        reflect.ValueOf(key.Space),
		"T":            reflect.ValueOf(key.T),
		"Tab":          reflect.ValueOf(key.Tab),
		"U":            reflect.ValueOf(key.U),
		"Up":           reflect.ValueOf(key.Up),
		"V":            reflect.ValueOf(key.V),
		"W":            reflect.ValueOf(key.W),
		"X":            reflect.ValueOf(key.X),
		"Y":            reflect.ValueOf(key.Y),
		"Z":            reflect.ValueOf(key.Z),

		// type definitions
		"Button": reflect.ValueOf((*key.Button)(nil)),
	}
}
